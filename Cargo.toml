[package]
name = "jos"
version = "0.1.0"
authors = ["Jason Devers <dev.json@gmail.com>"]
edition = "2024"

[dependencies]
volatile = "0.2.6" # NOTE: newer versions are not compatible with the blog posts
spin     = "0.5.2"
uart_16550 = "0.2.0" # TODO: see if there isn't a better crate to use now
lazy_static = { version = "1.0", features = ["spin_no_std"] }

[target.'cfg(target_arch = "x86_64")'.dependencies]
bootloader = "0.9"
x86_64     = "0.14.2"

[target.'cfg(target_arch = "aarch64")'.dependencies]
cortex-a = "7.0.0"

[profile.dev]
# panic = "abort"

[profile.release]
# panic = "abort"

[package.metadata.bootimage]
# this allows an easy way to exit QEMU from the guest system and has a clean way to shut down the OS
# TODO: what would be better would be implementing APM or ACPI
test-args = ["-device", "isa-debug-exit,iobase=0xf4,iosize=0x04"]
test-success-exit-code = 33 # (0x10 << 1) | 1

# [target.'cfg(target_os = "linux")']
# rustflags = ["-C", "link-arg=-nostartfiles"]

# [target.'cfg(target_os = "windows")']
# rustflags = ["-C", "link-args=/ENTRY:_start /SUBSYSTEM:console"]

# [target.'cfg(target_os = "macos")']
# rustflags = ["-C", "link-args=-e __start -static -nostartfiles"]


# While it’s possible to build a freestanding executable for Linux, Windows, and macOS, it’s probably not a good idea. 
# The reason is that our executable still expects various things, for example that a stack is initialized when the 
# _start function is called. Without the C runtime, some of these requirements might not be fulfilled, 
# which might cause our program to fail, e.g. through a segmentation fault.
